{"version":3,"sources":["index.js"],"names":["Square","props","color","console","log","isWinMove","value","className","onClick","style","backgroundColor","Board","i","j","this","winmove","squares","squarelist","length","rowSquareList","push","renderSquare","React","Component","Game","state","history","Array","fill","map","xIsNext","stepNumber","historyDescending","slice","arr","calculateWinner","lowest","lowestEmptyInCol","setState","concat","delta","step","colorWinner","current","winner","status","moveBtnGenerator","move","desc","undefined","jumpTo","fontWeight","moves","reverse","handleClick","descendOrder","horizontalWin","n","verticalWin","diagLeftWin","diagRightWin","includes","gameDraw","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.76cc813b.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n    console.log(props.isWinMove);\n    let color;\n    if (props.isWinMove) {\n        console.log(\"Is Win Move!\");\n        if (props.value === 'X')\n            color = \"orange\";\n        else if (props.value === 'O')\n            color = \"aqua\";\n        // Undefined should be impossible on a winning move.\n    } else {\n        if (props.value === 'X')\n            color = \"red\";\n        else if (props.value === 'O')\n            color = \"blue\";\n        else\n            color = \"white\";\n    }\n\n    return (\n        <button \n            className=\"square\" \n            onClick={props.onClick} \n            style={{backgroundColor: color}} \n        />\n    )\n}\n\nclass Board extends React.Component {\n    renderSquare(i, j) {\n        let isWinMove;\n        if (this.props.winmove) {\n            isWinMove = this.props.winmove[0] === i && this.props.winmove[1] === j\n        } else {\n            isWinMove = false;\n        }\n\n        return (\n            <Square \n                value={this.props.squares[i][j]} \n                onClick={() => this.props.onClick(i, j)}\n                key={[i, j]}\n                isWinMove={isWinMove}\n            />\n        );\n    }\n\n    render() {\n        let squarelist = [];\n        for (var i = 0; i < this.props.squares.length; i++) {\n            let rowSquareList = [];\n            for (var j = 0; j < this.props.squares[i].length; j++) {\n                rowSquareList.push(this.renderSquare(i, j));\n            }\n\n            squarelist.push(\n                <div className=\"board-row\" key={i}>\n                    {rowSquareList}\n                </div>\n            )\n        }\n\n        return (\n            <div>\n                {squarelist}\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            history: [{\n                squares: Array(6).fill().map(() => Array(7).fill(null)),\n            }],\n            xIsNext: true,\n            stepNumber: 0,\n            historyDescending: false\n        }\n    }\n\n    lowestEmptyInCol(squares, j) {\n        for (var i = squares.length - 1; i >= 0; i--) {\n            if (squares[i][j] === null)\n                return i;\n        }\n        return null;\n    }\n\n    handleClick(i, j) {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n        // This deep copies the multidimensional array - using current.squares.slice()\n        // just makes a new array of pointers to the same subarrays\n        const squares = current.squares.map((arr) => arr.slice());\n\n        \n        if (calculateWinner(squares)) {      \n            return;    \n        }\n        \n        const lowest = this.lowestEmptyInCol(squares, j);\n        if (lowest !== null) {\n            squares[lowest][j] = this.state.xIsNext? 'X' : 'O';\n        }\n\n        this.setState({\n            history: history.concat([{\n                squares: squares,\n                delta: [lowest, j]\n            }]),\n            xIsNext: !this.state.xIsNext,\n            stepNumber: history.length\n        });\n    }\n\n    jumpTo(step) {\n        this.setState({\n            stepNumber: step,\n            xIsNext: (step % 2) === 0\n        });\n    }\n\n    descendOrder() {\n        this.setState({\n            historyDescending: !this.state.historyDescending\n        })\n    }\n\n    render() {\n        const history = this.state.history;\n        const current = history[this.state.stepNumber];\n        const winner = calculateWinner(current.squares);\n\n        let colorWinner;\n        if (winner === \"X\")\n            colorWinner = \"Red\";\n        else if (winner === \"O\")\n            colorWinner = \"Blue\";\n        else if (winner === \"Draw\")\n            colorWinner = winner;\n\n        let moveBtnGenerator = (step, move) => {\n            const desc = step.delta === undefined ?\n                \"Go to game start\" :\n                \"Go to move #\" + move + \" (\" + step.delta[0] + \", \" + step.delta[1] + \")\";\n\n            return (\n                <li key={move}>\n                    <button onClick={() => this.jumpTo(move)}\n                            style={move === this.state.stepNumber ? {fontWeight: \"bold\"} : {}}>\n                        {desc}\n                    </button>\n                </li>\n            );\n        }\n\n        const moves = this.state.historyDescending ? \n            history.map(moveBtnGenerator).reverse() \n            : history.map(moveBtnGenerator);\n\n        let status;\n        if (winner) {\n            status = \"Winner: \" + colorWinner;\n        } else {\n            status = \"Next player: \" + (this.state.xIsNext? 'Red' : 'Blue');\n        }\n\n        let winmove;\n        if (winner) {\n            winmove = current.delta;\n            console.log(current.delta);\n        } else {\n            winmove = undefined;\n        }\n\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board \n                        squares={current.squares}\n                        onClick={(i, j) => this.handleClick(i, j)}\n                        winmove={winmove}\n                    />\n                </div>\n                <div className=\"game-info\">\n                    <div>{ status }</div>\n                    <button onClick={() => this.descendOrder()}>\n                        Order: {this.state.historyDescending? \"Descending\" : \"Ascending\"}\n                    </button>\n                    <ol>{ moves }</ol>\n                </div>\n            </div>\n        );\n    }\n}\n\n// Helper methods for victory condition checking\n\nfunction horizontalWin(squares, i, j, n) {\n    if (squares[i][j] === null) return false;\n    if (n <= 1) return true;\n    if (j <= 0) return false;\n    return (squares[i][j] === squares[i][j - 1]) && horizontalWin(squares, i, j - 1, n - 1);\n}\n\nfunction verticalWin(squares, i, j, n) {\n    if (squares[i][j] === null) return false;\n    if (n <= 1) return true;\n    if (i <= 0) return false;\n    return (squares[i][j] === squares[i - 1][j]) && verticalWin(squares, i - 1, j, n - 1);\n}\n\nfunction diagLeftWin(squares, i, j, n) {\n    if (squares[i][j] === null) return false;\n    if (n <= 1) return true;\n    if (i <= 0) return false;\n    if (j <= 0) return false;\n    return (squares[i][j] === squares[i - 1][j - 1]) && diagLeftWin(squares, i - 1, j - 1, n - 1);\n}\n\nfunction diagRightWin(squares, i, j, n) {\n    if (squares[i][j] === null) return false;\n    if (n <= 1) return true;\n    if (i <= 0) return false;\n    if (j >= squares[i].length - 1) return false;\n    return (squares[i][j] === squares[i - 1][j + 1]) && diagRightWin(squares, i - 1, j + 1, n - 1);\n}\n\nfunction gameDraw(squares) {\n    return squares[0].includes(null);\n}\n\n// Actual victory condition checking\n\nfunction calculateWinner(squares) {\n    for (var i = 0; i < squares.length; i++) {\n        for (var j = 0; j < squares[i].length; j++) {\n            if (horizontalWin(squares, i, j, 4)\n             || verticalWin(squares, i, j, 4)\n             || diagLeftWin(squares, i, j, 4)\n             || diagRightWin(squares, i, j, 4))\n                return squares[i][j];\n        }\n    }\n\n    if (!gameDraw(squares)) return \"Draw\";\n\n    return null;\n}\n\n// ========================================\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}